# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: currencies

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.8
  region: ca-central-1
  environment:
    SNS_TOPIC: arn:aws:sns:ca-central-1:XXXXXXX:currency-topic
    DYNAMODB_TABLE: currency
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardITerator
            - dynamodb:ListStreams
          Resource: arn:aws:dynamodb:ca-central-1:XXXXXXX:table/currency
        - Effect: Allow
          Action:
            - sns:Publish
          Resource: arn:aws:sns:ca-central-1:XXXXXXX:currency-topic

functions:
  create_currency:
    handler: handler.create_currency
    events:
      - http:
          path: currency
          method: post
          cors: true
  delete_currency:
    handler: handler.delete_currency
    events:
      - http:
          path: currency/{symbol}
          method: delete
          cors: true
  listen_currency:
    handler: listener.listen_currency
    events:
      - stream: arn:aws:dynamodb:ca-central-1:XXXXXXX:table/currency/stream/2022-03-21T19:53:41.766
  consume_topic:
    handler: consumer.consume_topic
    events:
      - sns: arn:aws:sns:ca-central-1:XXXXXXX:currency-topic

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
